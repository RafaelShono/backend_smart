// routes/corretorEnem.js

const express = require('express');
const router = express.Router();
const Anthropic = require('@anthropic-ai/sdk');
const authenticateFirebaseToken = require('../middlewares/authenticateFirebaseToken');

// Inicializar Claude
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY || 'sk-ant-api03-1234567890abcdef'
});

/**
 * Agente Especialista em Corre√ß√£o de Reda√ß√£o ENEM
 * 
 * Este agente atua como um corretor experiente do ENEM, avaliando:
 * - Compet√™ncia 1: Dom√≠nio da norma culta
 * - Compet√™ncia 2: Compreens√£o da proposta
 * - Compet√™ncia 3: Sele√ß√£o e organiza√ß√£o de informa√ß√µes
 * - Compet√™ncia 4: Conhecimento dos mecanismos lingu√≠sticos
 * - Compet√™ncia 5: Proposta de interven√ß√£o
 */
class CorretorEnem {
  constructor() {
    this.criteriosEnem = {
      competencia1: {
        nome: "Dom√≠nio da norma culta da l√≠ngua portuguesa",
        descricao: "Avalia o dom√≠nio da modalidade escrita formal da l√≠ngua portuguesa",
        aspectos: [
          "Ortografia",
          "Acentua√ß√£o",
          "Pontua√ß√£o",
          "Concord√¢ncia verbal e nominal",
          "Reg√™ncia verbal e nominal",
          "Coloca√ß√£o pronominal",
          "Estrutura sint√°tica"
        ]
      },
      competencia2: {
        nome: "Compreens√£o da proposta de reda√ß√£o",
        descricao: "Avalia se o candidato compreendeu a proposta e desenvolveu o tema",
        aspectos: [
          "Fuga ao tema",
          "Desenvolvimento do tema",
          "Respeito aos limites do texto",
          "Coer√™ncia com a proposta"
        ]
      },
      competencia3: {
        nome: "Sele√ß√£o e organiza√ß√£o das informa√ß√µes",
        descricao: "Avalia a capacidade de selecionar e organizar informa√ß√µes",
        aspectos: [
          "Argumenta√ß√£o",
          "Coer√™ncia textual",
          "Progress√£o textual",
          "Sele√ß√£o de informa√ß√µes relevantes"
        ]
      },
      competencia4: {
        nome: "Conhecimento dos mecanismos lingu√≠sticos",
        descricao: "Avalia o uso de recursos coesivos",
        aspectos: [
          "Coes√£o referencial",
          "Coes√£o sequencial",
          "Coes√£o lexical",
          "Conectores adequados"
        ]
      },
      competencia5: {
        nome: "Proposta de interven√ß√£o",
        descricao: "Avalia a proposta de solu√ß√£o para o problema",
        aspectos: [
          "Detalhamento da proposta",
          "Viabilidade",
          "Agentes envolvidos",
          "Meios para realiza√ß√£o"
        ]
      }
    };
  }

  /**
   * Analisa uma reda√ß√£o ENEM seguindo os crit√©rios oficiais
   */
  async analisarRedacao(texto, tema) {
    try {
      const prompt = this.gerarPromptAnalise(texto, tema);
      
      const response = await anthropic.messages.create({
        model: "claude-3-5-haiku-20241022",
        max_tokens: 4000,
        temperature: 0.3,
        messages: [{
          role: "user",
          content: prompt
        }]
      });

      const analise = response.content[0].text;
      return this.processarAnalise(analise);

    } catch (error) {
      console.error('Erro na an√°lise do Claude:', error);
      return this.gerarAnaliseFallback(texto, tema);
    }
  }

  /**
   * Gera prompt detalhado para an√°lise ENEM
   */
  gerarPromptAnalise(texto, tema) {
    return `Voc√™ √© um corretor experiente do ENEM com mais de 10 anos de experi√™ncia. Analise a seguinte reda√ß√£o seguindo EXATAMENTE os crit√©rios oficiais do ENEM.

TEMA DA REDA√á√ÉO: "${tema}"

TEXTO DA REDA√á√ÉO:
"${texto}"

INSTRU√á√ïES PARA AN√ÅLISE:

1. AVALIE CADA COMPET√äNCIA (0-200 pontos cada):
   - Compet√™ncia 1: Dom√≠nio da norma culta
   - Compet√™ncia 2: Compreens√£o da proposta
   - Compet√™ncia 3: Sele√ß√£o e organiza√ß√£o das informa√ß√µes
   - Compet√™ncia 4: Conhecimento dos mecanismos lingu√≠sticos
   - Compet√™ncia 5: Proposta de interven√ß√£o

2. FORMATO DE RESPOSTA (JSON):
{
  "pontuacao": {
    "competencia1": 160,
    "competencia2": 180,
    "competencia3": 140,
    "competencia4": 120,
    "competencia5": 100
  },
  "pontuacaoTotal": 700,
  "nivel": "Bom",
  "analiseDetalhada": {
    "competencia1": {
      "pontos": 160,
      "observacoes": "Bom dom√≠nio da norma culta, com poucos desvios...",
      "sugestoes": "Aten√ß√£o √† concord√¢ncia verbal..."
    },
    "competencia2": {
      "pontos": 180,
      "observacoes": "Excelente compreens√£o da proposta...",
      "sugestoes": "Continue desenvolvendo o tema de forma consistente..."
    }
  },
  "pontosFortes": [
    "Argumenta√ß√£o bem estruturada",
    "Boa proposta de interven√ß√£o"
  ],
  "pontosFracos": [
    "Alguns desvios de concord√¢ncia",
    "Falta de conectores em algumas passagens"
  ],
  "sugestoesGerais": [
    "Revisar concord√¢ncia verbal",
    "Ampliar o uso de conectores",
    "Detalhar melhor a proposta de interven√ß√£o"
  ]
}

3. CRIT√âRIOS DE PONTUA√á√ÉO:
- 200 pontos: Excelente
- 160-180 pontos: Bom
- 120-140 pontos: Regular
- 80-100 pontos: Insuficiente
- 0-60 pontos: Muito Insuficiente

4. SEJA RIGOROSO mas JUSTO na avalia√ß√£o.
5. FOQUE nos aspectos t√©cnicos da reda√ß√£o ENEM.
6. D√ä SUGEST√ïES CONCRETAS de melhoria.

Responda APENAS com o JSON, sem texto adicional.`;
  }

  /**
   * Processa a resposta do Claude
   */
  processarAnalise(analise) {
    try {
      // Tentar extrair JSON da resposta
      const jsonMatch = analise.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const dados = JSON.parse(jsonMatch[0]);
        return this.validarAnalise(dados);
      }
    } catch (error) {
      console.error('Erro ao processar an√°lise:', error);
    }
    
    return this.gerarAnaliseFallback();
  }

  /**
   * Valida se a an√°lise est√° no formato correto
   */
  validarAnalise(dados) {
    const analiseValida = {
      pontuacao: {
        competencia1: Math.min(200, Math.max(0, dados.pontuacao?.competencia1 || 0)),
        competencia2: Math.min(200, Math.max(0, dados.pontuacao?.competencia2 || 0)),
        competencia3: Math.min(200, Math.max(0, dados.pontuacao?.competencia3 || 0)),
        competencia4: Math.min(200, Math.max(0, dados.pontuacao?.competencia4 || 0)),
        competencia5: Math.min(200, Math.max(0, dados.pontuacao?.competencia5 || 0))
      },
      pontuacaoTotal: 0,
      nivel: dados.nivel || 'Regular',
      analiseDetalhada: dados.analiseDetalhada || {},
      pontosFortes: dados.pontosFortes || [],
      pontosFracos: dados.pontosFracos || [],
      sugestoesGerais: dados.sugestoesGerais || [],
      timestamp: new Date(),
      fonte: 'Agente Corretor ENEM'
    };

    // Calcular pontua√ß√£o total
    analiseValida.pontuacaoTotal = Object.values(analiseValida.pontuacao).reduce((sum, pontos) => sum + pontos, 0);

    return analiseValida;
  }

  /**
   * Gera an√°lise fallback quando Claude n√£o est√° dispon√≠vel
   */
  gerarAnaliseFallback(texto = '', tema = '') {
    const palavras = texto.split(' ').length;
    const linhas = texto.split('\n').length;
    
    // An√°lise b√°sica baseada em crit√©rios simples
    let pontuacaoBase = 100;
    
    if (palavras >= 300) pontuacaoBase += 20;
    if (linhas >= 7) pontuacaoBase += 20;
    if (texto.includes('Portanto') || texto.includes('Dessa forma')) pontuacaoBase += 10;
    if (texto.includes('Governo') || texto.includes('sociedade')) pontuacaoBase += 10;

    return {
      pontuacao: {
        competencia1: Math.min(200, pontuacaoBase + Math.floor(Math.random() * 40)),
        competencia2: Math.min(200, pontuacaoBase + Math.floor(Math.random() * 40)),
        competencia3: Math.min(200, pontuacaoBase + Math.floor(Math.random() * 40)),
        competencia4: Math.min(200, pontuacaoBase + Math.floor(Math.random() * 40)),
        competencia5: Math.min(200, pontuacaoBase + Math.floor(Math.random() * 40))
      },
      pontuacaoTotal: 0,
      nivel: 'An√°lise Autom√°tica',
      analiseDetalhada: {
        competencia1: {
          pontos: 0,
          observacoes: "An√°lise autom√°tica - verifique ortografia e gram√°tica",
          sugestoes: "Revise a concord√¢ncia verbal e nominal"
        }
      },
      pontosFortes: ["Texto com desenvolvimento adequado"],
      pontosFracos: ["An√°lise limitada - use o corretor completo"],
      sugestoesGerais: [
        "Revise ortografia e gram√°tica",
        "Desenvolva melhor os argumentos",
        "Inclua proposta de interven√ß√£o detalhada"
      ],
      timestamp: new Date(),
      fonte: 'Sistema Autom√°tico',
      isFallback: true
    };
  }
}

// Instanciar o corretor
const corretorEnem = new CorretorEnem();

// Rota para an√°lise de reda√ß√£o ENEM
router.post('/analisar-enem', authenticateFirebaseToken, async (req, res) => {
  try {
    const { texto, tema, userId } = req.body;

    if (!texto || !texto.trim()) {
      return res.status(400).json({
        success: false,
        message: 'Texto da reda√ß√£o √© obrigat√≥rio'
      });
    }

    if (texto.length < 100) {
      return res.status(400).json({
        success: false,
        message: 'Reda√ß√£o muito curta. M√≠nimo 100 caracteres'
      });
    }

    console.log(`üìù Iniciando an√°lise ENEM para usu√°rio: ${userId}`);
    console.log(`üìÑ Tema: ${tema}`);
    console.log(`üìä Tamanho do texto: ${texto.length} caracteres`);

    const analise = await corretorEnem.analisarRedacao(texto, tema);

    // Salvar an√°lise no Firestore
    if (userId) {
      try {
        const admin = require('firebase-admin');
        const db = admin.firestore();
        
        await db.collection('analises_enem').add({
          userId,
          tema,
          texto: texto.substring(0, 1000), // Limitar tamanho
          analise,
          dataCriacao: new Date()
        });
        
        console.log(`‚úÖ An√°lise salva no Firestore para usu√°rio: ${userId}`);
      } catch (firestoreError) {
        console.error('Erro ao salvar no Firestore:', firestoreError);
        // N√£o falhar a requisi√ß√£o por erro no Firestore
      }
    }

    res.json({
      success: true,
      analise,
      message: 'An√°lise conclu√≠da com sucesso'
    });

  } catch (error) {
    console.error('Erro na an√°lise ENEM:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor na an√°lise',
      error: error.message
    });
  }
});

// Rota para obter crit√©rios de avalia√ß√£o
router.get('/criterios-enem', authenticateFirebaseToken, (req, res) => {
  res.json({
    success: true,
    criterios: corretorEnem.criteriosEnem,
    message: 'Crit√©rios de avalia√ß√£o ENEM'
  });
});

module.exports = router;
